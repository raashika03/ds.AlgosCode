#include <bits/stdc++.h>
using namespace std;
struct node{
    int data;
    struct node* next;
};
void push(struct node** head_ref,int new_data){
    struct node* new_node=new node();
    new_node->data=new_data;
    new_node->next=(*head_ref);
    (*head_ref)=new_node;
}
void print(struct node* head){
    while(head!=NULL){
        cout<<head->data<<" ";
        head=head->next;
    }cout<<"\n";
}
void reverse(struct node** head){
    struct node* prev=NULL,*curr=(*head),*next=NULL;
    while(curr!=NULL){
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }*head=prev;
}
struct node* inter(struct node* head1,struct node* head2){
    struct node* out=NULL;
    while(head1!=NULL&&head2!=NULL){
        if(head1->data==head2->data){
            push(&out,head1->data);
            head1=head1->next;
            head2=head2->next;
        }
        else if(head1->data<head2->data)head1=head1->next;
        else head2=head2->next;
    }return out;
}
struct node* uni(struct node* head1,struct node* head2){
    struct node* out=NULL;
    while(head1!=NULL&&head2!=NULL){
        if(head1->data==head2->data){
            push(&out,head1->data);
            head1=head1->next;
            head2=head2->next;
        }
        else if(head1->data<head2->data){
            push(&out,head1->data);
            head1=head1->next;
        }
        else{
            push(&out,head2->data);
            head2=head2->next;
        }
    }
    if(head1==NULL&&head2!=NULL){
        while(head2!=NULL){
            push(&out,head2->data);
            head2=head2->next;
        }
    }
    else{
        while(head1!=NULL){
            push(&out,head1->data);
            head1=head1->next;
        }
    }
    return out;
}
node* SortedMerge(node* a, node* b); 
void FrontBackSplit(node* source, node** frontRef, node** backRef); 
void MergeSort(node** headRef) 
{ 
    node* head = *headRef; 
    node* a; 
    node* b; 
    if ((head == NULL) || (head->next == NULL))return; 
    FrontBackSplit(head, &a, &b);
    MergeSort(&a); 
    MergeSort(&b); 
    *headRef = SortedMerge(a, b); 
} 
node* SortedMerge(node* a, node* b) 
{ 
    node* result = NULL; 
    if (a == NULL) return (b); 
    else if (b == NULL) return (a); 
    if (a->data <= b->data) { 
        result = a; 
        result->next = SortedMerge(a->next, b); 
    } 
    else { 
        result = b; 
        result->next = SortedMerge(a, b->next); 
    } 
    return (result); 
} 
void FrontBackSplit(node* source, node** frontRef, node** backRef) 
{ 
    node* fast=source->next,*slow=source;
    while (fast != NULL) { 
        fast = fast->next; 
        if (fast != NULL) { 
            slow = slow->next; 
            fast = fast->next; 
        } 
    } 
    *frontRef = source; 
    *backRef = slow->next; 
    slow->next = NULL; 
} 
int main(){
    struct node* head1=NULL;
    struct node* head2=NULL;
    int n1,n2;cin>>n1>>n2;
    for(int i=0;i<n1;i++){
        int z;cin>>z;
        push(&head1,z);
    }
    for(int i=0;i<n2;i++){
        int z;cin>>z;
        push(&head2,z);
    }
    print(head1);
    print(head2);
    MergeSort(&head1);
    MergeSort(&head2);
    print(head1);
    print(head2);
    struct node* iout=inter(head1,head2);
    struct node* uout=uni(head1,head2);
    reverse(&iout);
    reverse(&uout);
    print(iout);
    print(uout);
    return 0;
}
    
